# Description:
# - This script is used to install the required packages for the BlackStack project on Ubuntu 20-04.
# 

# Set timezone to America/Argentina/Buenos_Aires
RUN timedatectl set-timezone "America/Argentina/Buenos_Aires"

# Add user 'blackstack' with home directory and bash shell
RUN useradd -m -s /bin/bash blackstack

# Set password for 'blackstack' user
RUN echo "blackstack:$$ssh_password" | chpasswd

# Add 'blackstack' to sudoers
RUN usermod -aG sudo blackstack

# Change hostname
RUN hostnamectl set-hostname "$$name"

# Enable PasswordAuthentication in SSH config
RUN sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
RUN sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config

# Restart SSH service
RUN systemctl restart ssh

# Update and upgrade packages
RUN apt-get update -y
RUN apt-get upgrade -y

# Backup old .postgresql folder if it exists
RUN if [ -d ~/.postgresql ]; then
    mv ~/.postgresql ~/.postgresql.$$(date +%s)
fi
RUN mkdir -p ~/.postgresql

# Ensure the locale is correctly set
RUN locale-gen en_US.UTF-8
RUN update-locale LANG=en_US.UTF-8 LANGUAGE=en_US: LC_ALL=en_US.UTF-8 \
    LC_TIME=en_US.UTF-8 LC_MONETARY=en_US.UTF-8 LC_ADDRESS=en_US.UTF-8 \
    LC_TELEPHONE=en_US.UTF-8 LC_NAME=en_US.UTF-8 LC_MEASUREMENT=en_US.UTF-8 \
    LC_IDENTIFICATION=en_US.UTF-8 LC_NUMERIC=en_US.UTF-8 LC_PAPER=en_US.UTF-8

# Install PostgreSQL and development libraries
RUN apt-get install -y libpq-dev postgresql postgresql-contrib

# Start PostgreSQL service
RUN systemctl start postgresql

# Configure PostgreSQL to listen on all addresses
RUN sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/12/main/postgresql.conf

# Update pg_hba.conf to allow remote connections
RUN sed -i '$$ a host    all             all             0.0.0.0/0               md5' /etc/postgresql/12/main/pg_hba.conf

# Restart PostgreSQL service
RUN systemctl restart postgresql

# Create PostgreSQL user 'blackstack' with superuser privileges
RUN sudo -u postgres createuser -s blackstack

# Set password for PostgreSQL user 'blackstack'
RUN sudo -u postgres psql -c "ALTER USER blackstack WITH PASSWORD '$$postgres_password';"

# Create new database 'blackstack' owned by user 'blackstack'
RUN sudo -u postgres createdb -O blackstack blackstack

# Install required packages
RUN apt-get install -y jq net-tools gnupg2 nginx sshpass bc unzip curl certbot git xvfb

# Grant 'blackstack' user passwordless sudo access for managing Nginx and nginx.conf
# Grant 'blackstack' user passwordless sudo access for managing Nginx and nginx.conf
#RUN echo "blackstack ALL=(ALL) NOPASSWD: /bin/systemctl start nginx, /bin/systemctl stop nginx, /bin/systemctl restart nginx, /bin/rm /etc/nginx/nginx.conf, /bin/cp /home/blackstack/code1/master/nginx.conf /etc/nginx/nginx.conf" | tee /etc/sudoers.d/blackstack-nginx && \
#    chmod 0440 /etc/sudoers.d/blackstack-nginx && \
#    visudo -cf /etc/sudoers.d/blackstack-nginx

# Set Correct Permissions for the Sudoers File:
#RUN chown root:root /etc/nginx/nginx.conf
#RUN chmod 644 /etc/nginx/nginx.conf

# Install CockroachDB CLI
RUN cd /tmp
RUN curl -sSL https://binaries.cockroachdb.com/cockroach-v21.2.10.linux-amd64.tgz | tar -xz
RUN cp cockroach-v21.2.10.linux-amd64/cockroach /usr/local/bin/
RUN rm -rf cockroach-v21.2.10.linux-amd64*

# Install GPG keys for RVM
RUN gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \
409B6B1796C275462A1703113804BB82D39DC0E3 \
7D2BAF1CF37B13E2069D6956105BD0E739499BDB

# Install RVM
RUN curl -sSL https://get.rvm.io | bash -s stable

# Add 'blackstack' user to 'rvm' group
RUN usermod -aG rvm blackstack

# Suppress rvmsudo warnings
RUN sed -i '$$ a export rvmsudo_secure_path=1' /etc/profile.d/rvm.sh

# Source RVM scripts
# Install Ruby 3.1.2 and set it as default
RUN source /etc/profile.d/rvm.sh && rvm use 3.1.2 --default --install

# Verify Ruby installation
RUN ruby -v

# Install bundler
RUN gem install bundler

# Create code directory for 'blackstack' user
#RUN mkdir -p /home/blackstack/code
#RUN chown -R blackstack:blackstack /home/blackstack/code

# Add Ubuntu focal-updates repository if not present
RUN if ! grep -q "focal-updates main" /etc/apt/sources.list; then
    sed -i '$$ a deb http://archive.ubuntu.com/ubuntu focal-updates main' /etc/apt/sources.list
    apt-get update -y
fi

# Install AdsPower
RUN cd /tmp
RUN wget -q https://version.adspower.net/software/linux-x64-global/AdsPower-Global-5.9.14-x64.deb
RUN DEBIAN_FRONTEND=noninteractive LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 apt-get install -y ./AdsPower-Global-5.9.14-x64.deb
RUN rm -f AdsPower-Global-5.9.14-x64.deb

# Install ChromeDriver
RUN cd /tmp
RUN wget -q https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chromedriver-linux64.zip
RUN unzip -q chromedriver-linux64.zip
RUN mv chromedriver-linux64/chromedriver /usr/bin/
RUN chmod +x /usr/bin/chromedriver
RUN rm -rf chromedriver-linux64*

# Create a flag file for 'blackstack' user
RUN touch /home/blackstack/.pampa
RUN chown blackstack:blackstack /home/blackstack/.pampa

# Install SSL Certificate
# Reference: https://github.com/leandrosardi/my.saas/discussions/40
#
RUN service nginx stop
RUN certbot certonly -d $$domain --noninteractive --standalone --agree-tos --register-unsafely-without-email
RUN mkdir -p /home/blackstack/ssl
RUN rm -f /home/blackstack/ssl/dev.crt
RUN rm -f /home/blackstack/ssl/dev.key 
RUN chown -R blackstack:blackstack /etc/letsencrypt/live/$$domain
RUN cp /etc/letsencrypt/live/$$domain/fullchain.pem /home/blackstack/ssl/
RUN cp /etc/letsencrypt/live/$$domain/privkey.pem /home/blackstack/ssl/
RUN mv /home/blackstack/ssl/fullchain.pem /home/blackstack/ssl/dev.crt
RUN mv /home/blackstack/ssl/privkey.pem /home/blackstack/ssl/dev.key

# Nginx configuration file
#
# 1. Delete existing file /etc/nginx/nginx.conf
# 2. Download nginx.conf from https://raw.githubusercontent.com/leandrosardi/my.saas/main/nginx.conf into folder /etc/nginx/
# 3. Start Nginx again. 
#
RUN rm -f /etc/nginx/nginx.conf
RUN curl -sSL https://raw.githubusercontent.com/leandrosardi/my.saas/main/nginx.conf -o /etc/nginx/nginx.conf
RUN service nginx start
